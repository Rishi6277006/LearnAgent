---

# **LearnAgent: AI-Powered Learning Platform** 🚀

![Python](https://img.shields.io/badge/python-3.10+-blue) ![Streamlit](https://img.shields.io/badge/streamlit-supported-brightgreen) ![FastAPI](https://img.shields.io/badge/fastapi-powered-orange) ![OpenAI](https://img.shields.io/badge/openai-integrated-green)

**LearnAgent** is an AI-powered learning platform designed to generate **personalized lessons** on various topics. Built with modern technologies like **FastAPI**, **Streamlit**, and **OpenAI's GPT**, this project showcases my ability to create **scalable, user-friendly applications** that integrate cutting-edge AI capabilities.

---

## **✨ Project Overview**

LearnAgent is a **full-stack application** that allows users to:
- 🎯 Generate **customized lessons** based on their chosen topic, difficulty level (Beginner, Intermediate, Advanced), and learning preference (Theoretical, Practical).
- 🔐 Register and log in to track their progress.
- 🏆 View a **leaderboard** to compare their performance with other users.
- 🏅 Earn **badges** for completing milestones like finishing 5 lessons or scoring 100 on quizzes.

This project demonstrates my proficiency in:
- 🛠️ **Backend development** using **FastAPI** and **SQLAlchemy**.
- 🎨 **Frontend development** with **Streamlit** for an interactive user interface.
- 🤖 **Integrating AI models** (OpenAI's GPT) to generate dynamic, structured content.
- 🔒 **Managing sensitive data securely** using environment variables.
- ☁️ **Deploying applications** to cloud platforms like **Streamlit Community Cloud** and **Render**.

---

## **🌟 Features**

### **Core Features**
- **Personalized Lessons**: Generate markdown-formatted lessons tailored to the user's preferences.
- **User Authentication**: Secure user registration and login system with email validation.
- **Interactive UI**: Clean and intuitive Streamlit interface for seamless user interaction.
- **Leaderboard**: Track user rankings based on total points earned.
- **Badges System**: Reward users for completing tasks and achieving milestones.

### **Technical Highlights**
- **Backend**: Built with **FastAPI** for handling API requests, user management, and lesson generation.
- **Frontend**: Developed using **Streamlit** for a responsive and visually appealing interface.
- **Database**: SQLite for local development; can be scaled to PostgreSQL for production.
- **AI Integration**: Leverages OpenAI's GPT for generating high-quality, structured lessons.
- **Error Handling**: Robust error handling for duplicate emails, invalid inputs, and API errors.

---

## **🚀 Why This Project Stands Out**

This project highlights my ability to:
1. **Build Full-Stack Applications**: Demonstrates end-to-end development, from backend APIs to frontend interfaces.
2. **Integrate AI Models**: Showcases my expertise in leveraging AI tools to solve real-world problems.
3. **Write Clean, Maintainable Code**: Modular code structure ensures scalability and ease of maintenance.
4. **Deploy Applications**: Experience deploying applications to cloud platforms, ensuring they are accessible to users globally.
5. **Problem-Solving Skills**: Resolved challenges like duplicate email handling, API key security, and markdown rendering.

---

## **🛠️ Installation and Setup**

### **Prerequisites**
- Python 3.10 or higher
- SQLite (for local development)
- OpenAI API Key

### **Steps**
1. **Clone the Repository**:
   ```bash
   git clone https://github.com/yourusername/LearnAgent.git
   cd LearnAgent
   ```

2. **Set Up Virtual Environment**:
   ```bash
   python3 -m venv venv
   source venv/bin/activate  # On Windows: venv\Scripts\activate
   ```

3. **Install Dependencies**:
   ```bash
   pip install -r requirements.txt
   ```

4. **Configure Environment Variables**:
   - Create a `.env` file in the root directory and add the following:
     ```
     OPENAI_API_KEY=your_openai_api_key_here
     DATABASE_URL=sqlite:///./test.db
     ```

5. **Run the Backend**:
   ```bash
   uvicorn backend.api.main:app --reload
   ```

6. **Run the Frontend**:
   ```bash
   streamlit run frontend/streamlit.py
   ```

---

## **📚 Usage**

1. **Register a New User**:
   - Enter your name and email to create an account.

2. **Log In**:
   - Use your registered email to log in.

3. **Generate a Lesson**:
   - Choose a topic (e.g., Python, Machine Learning), difficulty level, and learning preference.
   - Click "Generate Lesson" to view the AI-generated lesson.

4. **Explore Leaderboard and Badges**:
   - Check your ranking on the leaderboard and earn badges for completing tasks.

---

## **📂 Project Structure**

```
LearnAgent/
├── backend/
│   ├── api/
│   │   └── main.py          # FastAPI backend for user management and lesson generation
│   └── agents/
│       └── agent.py         # Logic for generating lessons using OpenAI
├── frontend/
│   └── streamlit.py         # Streamlit frontend for user interaction
├── .env                     # Environment variables (do not commit this file)
├── requirements.txt         # List of Python dependencies
├── README.md                # This file
└── test.db                  # SQLite database (local development only)
```

---

## **☁️ Deployment**

### **Backend**
- Deploy the FastAPI backend on platforms like [Render](https://render.com), [Railway](https://railway.app), or [Heroku](https://heroku.com).
- Ensure environment variables are set in the hosting platform.

### **Frontend**
- Deploy the Streamlit app on [Streamlit Community Cloud](https://streamlit.io/cloud).
- Connect your GitHub repository and specify the entry point (`frontend/streamlit.py`).
- Add secrets (e.g., `OPENAI_API_KEY`, backend URL) in Streamlit Cloud settings.

---

## **🛠️ Technologies Used**

- **Backend**: FastAPI, SQLAlchemy, SQLite
- **Frontend**: Streamlit
- **AI Integration**: OpenAI GPT
- **Deployment**: Streamlit Cloud, Render
- **Other Tools**: Python, Requests, LangChain, Tenacity

---

## **🔮 Future Enhancements**

- **Advanced Topics**: Add support for more complex topics like deep learning, blockchain, etc.
- **Gamification**: Introduce quizzes and challenges to make learning more engaging.
- **Scalability**: Migrate to PostgreSQL for better performance in production environments.
- **Mobile App**: Develop a mobile-friendly version using frameworks like Flutter or React Native.

---

## **🤝 Contributing**

I welcome contributions! If you'd like to contribute:
1. Fork the repository.
2. Create a new branch (`git checkout -b feature/your-feature-name`).
3. Commit your changes (`git commit -m "Add your feature"`).
4. Push to the branch (`git push origin feature/your-feature-name`).
5. Open a pull request.

---

## **🙏 Acknowledgments**

- [OpenAI](https://openai.com) for providing the language model API.
- [Streamlit](https://streamlit.io) for the frontend framework.
- [FastAPI](https://fastapi.tiangolo.com) for the backend framework.
- [SQLAlchemy](https://www.sqlalchemy.org) for database management.

---

## **📞 Contact**

If you have any questions or would like to discuss this project further, feel free to reach out:

- **GitHub**: [@Rishi6277006](https://github.com/Rishi6277006)
- **Email**: thakker834@gmail.com
- **LinkedIn**: [Rishikesh Thakker](www.linkedin.com/in/rishikesh-thakker-318078275)

